-- AUTHENTICATION
DROP TABLE IF EXISTS AUTHENTICATION;
CREATE TABLE AUTHENTICATION (
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
-- Phone
DROP TABLE IF EXISTS PHONE;
CREATE TABLE PHONE(phone_number BIGINT NOT NULL PRIMARY KEY);
-- Province
DROP TABLE IF EXISTS PROVINCE;
CREATE TABLE PROVINCE(
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    PROVINCE VARCHAR(20) CHECK (
        PROVINCE IN(
            'AB',
            'BC',
            'MB',
            'NB',
            'NL',
            'NT',
            'NS',
            'NU',
            'ON',
            'PE',
            'QC',
            'SK',
            'YT'
        )
    )
);
-- Address
DROP TABLE IF EXISTS ADDRESS;
CREATE TABLE ADDRESS(
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    buildingNumber INTEGER NOT NULL CHECK(buildingNumber > 0),
    street VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    province BIGINT NOT NULL,
    postalCode VARCHAR(7) NOT NULL,
    FOREIGN KEY (province) REFERENCES PROVINCE(id)
);
-- User
DROP TABLE IF EXISTS PROFILE CASCADE;
CREATE TABLE PROFILE(
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    firstName VARCHAR(255) NOT NULL,
    middleName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    DOB DATE NOT NULL
);
-- PATIENT
DROP TABLE IF EXISTS PATIENT CASCADE;
CREATE TABLE PATIENT(
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    profile_id BIGINT NOT NULL,
    FOREIGN KEY (profile_id) REFERENCES PROFILE(id) ON DELETE CASCADE
);
-- RESPONSIBLE PARTY
DROP TABLE IF EXISTS RESPONSIBLE_PARTY CASCADE;
CREATE TABLE RESPONSIBLE_PARTY(
    responsible_id BIGINT NOT NULL,
    patient_id BIGINT NOT NULL,
    PRIMARY KEY (responsible_id, patient_id),
    FOREIGN KEY (responsible_id) REFERENCES PROFILE(id),
    FOREIGN KEY (patient_id) REFERENCES PATIENT(id)
);
-- EMPLOYEE with manual inheritance
DROP TABLE IF EXISTS EMPLOYEE CASCADE;
CREATE TABLE EMPLOYEE(
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    type BIGINT NOT NULL,
    salary BIGINT NOT NULL,
    SSN BIGINT NOT NULL UNIQUE,
    profile_id BIGINT NOT NULL,
    FOREIGN KEY (profile_id) REFERENCES PROFILE(id) ON DELETE CASCADE
);
-- BRANCH
DROP TABLE IF EXISTS BRANCH CASCADE;
CREATE TABLE BRANCH(
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    manager_id BIGINT NOT NULL,
    address_id BIGINT NOT NULL,
    phone_number BIGINT NOT NULL,
    FOREIGN KEY (manager_id) REFERENCES EMPLOYEE(id),
    FOREIGN KEY (address_id) REFERENCES ADDRESS(id),
    FOREIGN KEY (phone_number) REFERENCES PHONE(phone_number)
);
-- REVIEW
DROP TABLE IF EXISTS REVIEW CASCADE;
CREATE TABLE REVIEW(
    date DATE NOT NULL,
    branch_id BIGINT NOT NULL,
    patient_id BIGINT NOT NULL,
    professionalism INT CHECK(
        professionalism >= 0
        AND professionalism <= 5
    ),
    communication INT CHECK(
        communication >= 0
        AND communication <= 5
    ),
    cleanliness INT CHECK(
        cleanliness >= 0
        AND cleanliness <= 5
    ),
    value INT CHECK(
        value >= 0
        AND value <= 5
    ) -- comment VARCHAR(255) PRIMARY KEY (date, branch_id, patient_id),
    -- FOREIGN KEY(branch_id) REFERENCES BRANCH(id),
    -- FOREIGN KEY(patient_id) REFERENCES PATIENT(id)
);
-- APPOINTMENT_TYPE
DROP TABLE IF EXISTS APPOINTMENT_TYPE;
CREATE TABLE APPOINTMENT_TYPE (
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    type VARCHAR(255) UNIQUE NOT NULL
);
-- APPOINTMENT_STATUS
DROP TABLE IF EXISTS APPOINTMENT_STATUS;
CREATE TABLE APPOINTMENT_STATUS (
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    status VARCHAR(255) UNIQUE NOT NULL
);
-- PROCEDURE
DROP TABLE IF EXISTS PROCEDURE;
CREATE TABLE PROCEDURE (
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    appointment_id BIGINT NOT NULL,
    procedure_code BIGINT NOT NULL,
    invoice_id BIGINT NOT NULL,
    description VARCHAR(255),
    tooth CHAR,
    procedure_count INT CHECK(procedure_count >= 0)
);
-- -- TREATMENT
DROP TABLE IF EXISTS TREATMENT;
CREATE TABLE TREATMENT (
    medication VARCHAR(255) PRIMARY KEY,
    procedure_id INT NOT NULL,
    teeth CHAR,
    --?
    symptoms VARCHAR(255),
    comments VARCHAR(255),
    FOREIGN KEY (procedure_id) REFERENCES PROCEDURE(id)
);
-- FEE
DROP TABLE IF EXISTS FEE;
CREATE TABLE FEE (
    procedure_code BIGINT NOT NULL PRIMARY KEY,
    procedure_name VARCHAR(255) NOT NULL,
    procedure_type VARCHAR(255) NOT NULL,
    FOREIGN KEY (procedure_code) REFERENCES PROCEDURE(id)
);
-- APPOINTMENT
DROP TABLE IF EXISTS APPOINTMENT;
CREATE TABLE APPOINTMENT (
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    branch_id INT NOT NULL,
    employee_id INT NOT NULL,
    patient_id INT NOT NULL,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    type INT NOT NULL,
    status INT NOT NULL,
    room_number VARCHAR NOT NULL,
    FOREIGN KEY (branch_id) REFERENCES BRANCH(id)
);
-- PROCEDURE_TYPE
DROP TABLE IF EXISTS PROCEDURE_TYPE;
CREATE TABLE PROCEDURE_TYPE (
    id BIGINT NOT NULL IDENTITY PRIMARY KEY,
    type VARCHAR(255) UNIQUE NOT NULL
);
-- INSURANCE
DROP TABLE IF EXISTS INSURANCE CASCADE;
CREATE TABLE INSURANCE (
    policy_number BIGINT NOT NULL,
    group_number BIGINT NOT NULL,
    patient_id BIGINT NOT NULL,
    PRIMARY KEY (policy_number, group_number),
    FOREIGN KEY (patient_id) REFERENCES PATIENT(id)
);